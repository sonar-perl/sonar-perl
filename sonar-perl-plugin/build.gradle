plugins {
    id "java-library"
    id 'com.bmuschko.docker-remote-api' version '9.3.1'
    id "jacoco"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

repositories {
    mavenCentral()
}

ext {
    sonarApiVersion = '9.9.0.229'
    sonarqubeVersion = '9.6.1.59531'
}

dependencies {
    compileOnly "org.sonarsource.api.plugin:sonar-plugin-api:${sonarApiVersion}"
    testImplementation "org.sonarsource.api.plugin:sonar-plugin-api:${sonarApiVersion}"
    testImplementation "org.sonarsource.sonarqube:sonar-plugin-api-impl:${sonarqubeVersion}"
    implementation 'org.apache.commons:commons-compress:1.23.0'
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.13'
    implementation 'com.fasterxml.staxmate:staxmate:2.4.0'
    implementation 'commons-io:commons-io:2.7'
    implementation 'commons-lang:commons-lang:2.6'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    implementation project(':perl-frontend')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

compileJava {
    options.release = 8
}

jacoco {
    toolVersion = '0.8.10'
}
jacocoTestReport {
    reports {
        xml.required = true
    }
}

test {
    finalizedBy jacocoTestReport
}

jar {
    manifest {
        attributes "Build-Jdk": System.getProperty('java.version'),
                   "Build-Time": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                   "Plugin-BuildDate": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                   'Plugin-Key': 'communityperl',
                   'Plugin-Name': 'Community Perl',
                   'Plugin-Version': project.version,
                   'Implementation-Build': getCheckedOutGitCommitHash(),
                   'Plugin-Class': 'com.github.sonarperl.PerlPlugin',
                   "Plugin-Description": 'Code Analyzer for Perl',
                   "Plugin-Developers": 'Oliver Trosien',
                   "Plugin-Homepage": 'https://github.com/sonar-perl/sonar-perl',
                   "Plugin-IssueTrackerUrl": 'https://github.com/sonar-perl/sonar-perl/issues',
                   "Plugin-License": 'Apache',
                   "Plugin-Organization": 'sonar-perl',
                   "Plugin-OrganizationUrl": 'https://github.com/sonar-perl/',
                   "Plugin-SourcesUrl": 'https://github.com/sonar-perl/sonar-perl',
                   "Plugin-TermsConditionsUrl": 'https://github.com/sonar-perl/sonar-perl',
                   "Sonar-Version": project.ext.sonarApiVersion
    }
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

tasks.register('copyDockerfile', Copy) {
    group = 'Docker'
    description = 'Copies the Dockerfile into its target directory.'
    from 'Dockerfile'
    into 'build/docker'
}

tasks.register('copyDockerTargetArtifacts', Copy) {
    group = 'Docker'
    description = 'Assembles contents for docker image.'
    dependsOn copyDockerfile, shadowJar
    from "build/libs/" 
    include "*-all.jar"
    into "build/docker/build/libs/"
}

tasks.register('buildDockerImage', DockerBuildImage) {
    description = 'Builds a new docker image.'
    dependsOn copyDockerTargetArtifacts
    inputDir = file('build/docker')
    images.add("sonarperl/sonar-perl:latest")
    noCache = true
}

tasks.register('createDockerContainer', DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId buildDockerImage.getImageId()
    hostConfig.portBindings = [ '9000:9000', '9002:9002' ]
    hostConfig.autoRemove = true
}

tasks.register('publish') {}
publish.dependsOn(createDockerContainer)

tasks.register('startDockerContainer', DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId createDockerContainer.getContainerId()
    doLast {
        println createDockerContainer.getContainerId()
    }
}

tasks.register('run') {}
run.dependsOn(startDockerContainer)

tasks.register('stopDockerContainer', DockerStopContainer) {
    targetContainerId createDockerContainer.getContainerId()
}

tasks.register('stop') {}
stop.dependsOn stopDockerContainer


